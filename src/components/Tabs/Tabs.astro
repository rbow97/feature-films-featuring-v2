---

---

<nav-wrapper>
  <nav
    class="tabs-container rounded-2xl bg-primary-lightGrey border border-primary-grey h-md md:h-lg w-full p-[4px] gap-xs flex justify-between relative text-sm md:text-md"
  >
    <div class="animated-bg"></div>
    <a
      href="/"
      class="tab-btn grow p-sm h-full rounded-xl flex items-center justify-center px-md relative transition-bg ease duration-200"
      data-tab="popular-people"
    >
      <p>Popular People</p>
    </a>
    <a
      href="/popular-movies"
      class="tab-btn grow p-sm h-full rounded-xl flex items-center justify-center px-md"
      data-tab="popular-movies"
    >
      <p>Popular Movies</p>
    </a>
    <a
      href="/popular-tv"
      class="tab-btn grow p-sm h-full rounded-xl flex items-center justify-center px-md"
      data-tab="popular-tv"
    >
      <p>Popular TV</p>
    </a>
    <a
      href="/now-playing"
      class="tab-btn grow p-sm h-full rounded-xl flex items-center justify-center px-md"
      data-tab="now-playing"
    >
      <p>Now Playing</p>
    </a>
    <a
      href="/top-rated"
      class="tab-btn grow p-sm h-full rounded-xl flex items-center justify-center px-md"
      data-tab="top-rated"
    >
      <p>Top Rated</p>
    </a>
  </nav>
</nav-wrapper>

<style>
  .tabs-container {
    position: relative;
    overflow: hidden;
  }

  .animated-bg {
    position: absolute;
    top: 4px;
    left: 0;
    width: 0;
    height: calc(100% - 8px);
    background-color: #ffffff; /* You can replace this with the color you prefer */
    border-radius: 12px;
    transition:
      width 0.3s ease,
      left 0.3s ease;
    z-index: 0;
  }

  .tab-btn {
    position: relative;
    z-index: 1;
    cursor: pointer;
  }

  .tab-btn.active .animated-bg {
    background-color: #007bff; /* Active background color */
  }

  .tab-btn p {
    z-index: 2;
    position: relative;
  }
</style>

<script>
  import { navigate } from "astro:transitions/client";

  class NavWrapper extends HTMLElement {
    constructor() {
      super();

      const tabs: NodeListOf<HTMLAnchorElement> =
        document.querySelectorAll(".tab-btn")!;
      const animatedBg: HTMLDivElement =
        document.querySelector(".animated-bg")!;

      // Load the active tab from localStorage
      const activeTabData = localStorage.getItem("activeTab") ?? false;

      setTabBackgroundBasedOnLocalStorage(activeTabData, tabs, animatedBg);
      setActiveTabAndNavigate(tabs, animatedBg);
    }
  }

  customElements.define("nav-wrapper", NavWrapper);

  function moveBackground(
    tab: Element,
    animatedBg: HTMLDivElement,
    animate = true
  ) {
    const containerRect = tab.parentElement!.getBoundingClientRect();
    const tabRect = tab.getBoundingClientRect();

    const leftPosition = tabRect.left - containerRect.left;
    const tabWidth = tabRect.width;

    // Conditionally apply transition if animate is true
    if (!animate) {
      animatedBg.style.transition = "none";
    } else {
      animatedBg.style.transition = "width 0.3s ease, left 0.3s ease";
    }

    // Move and resize the animated background
    animatedBg.style.width = `${tabWidth}px`;
    animatedBg.style.left = `${leftPosition}px`;

    // Force a reflow to apply the immediate styles if animation is disabled
    if (!animate) {
      animatedBg.offsetHeight; // Trigger reflow
      animatedBg.style.transition = ""; // Re-enable transitions
    }
  }

  function setTabBackgroundBasedOnLocalStorage(
    activeTabData: string | false,
    tabs: NodeListOf<HTMLAnchorElement>,
    animatedBg: HTMLDivElement
  ) {
    /** STEP 1 */

    // Check localStorage and apply background
    if (activeTabData) {
      const activeTab = document.querySelector(
        `.tab-btn[data-tab="${activeTabData}"]`
      );

      if (activeTab) {
        activeTab.classList.add("active");
        moveBackground(activeTab, animatedBg, false);
        localStorage.removeItem("activeTab");
      }
    }

    /** STEP 2 */

    // If active tab isn't in local storage, check the URL for results page
    // else if (window.location.pathname.includes("/results")) {
    //   console.log("here");
    //   let matchedTab = document.querySelector('.tab-btn[data-tab="results"]')!;
    //   moveBackground(matchedTab, animatedBg, false);
    // }

    /** STEP 3 */

    // If we are not on the results page, check the URL and apply background
    else {
      const currentPath = window.location.pathname;
      let matchedTab = null;

      tabs.forEach((tab) => {
        const tabHref = tab.getAttribute("href");
        if (tabHref && currentPath.includes(tabHref)) {
          tab.classList.add("active");
          matchedTab = tab;
        } else {
          tab.classList.remove("active");
        }
      });

      if (matchedTab) {
        moveBackground(matchedTab, animatedBg, false);
      }
    }
  }

  function setActiveTabAndNavigate(
    tabs: NodeListOf<HTMLAnchorElement>,
    animatedBg: HTMLDivElement
  ) {
    tabs.forEach((tab) => {
      tab.addEventListener("click", (e) => {
        e.preventDefault(); // Prevent the default anchor behavior

        // Remove active class from all tabs
        tabs.forEach((tab) => tab.classList.remove("active"));

        // Add active class to the clicked tab
        tab.classList.add("active");

        // Store the clicked tab's data-tab in localStorage
        const tabData = tab.getAttribute("data-tab")!;
        localStorage.setItem("activeTab", tabData);

        // Move the background to the clicked tab with animation
        moveBackground(tab, animatedBg);

        // Delay the rerouting by 300ms
        setTimeout(() => {
          const href = tab.getAttribute("href");
          if (href) {
            navigate(href);
          }
        }, 300);
      });
    });
  }
</script>
