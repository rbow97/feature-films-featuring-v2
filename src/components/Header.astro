---
import Arrow from "./Arrow";
---

<header
  class="w-full py-sm flex gap-sm md:gap-md items-center justify-between mx-auto px-md fixed top-0 z-10 bg-white"
>
  <img
    src="/film-camera.svg"
    class="h-medium w-medium md:h-md md:w-md hidden md:block"
    height="40"
  />
  <search-wrapper
    class="grow max-w-screen-2xl flex items-center gap-sm md:gap-md"
  >
    <label for="text-input" class="sr-only">Search for someone</label>
    <input
      autocomplete="off"
      id="text-input"
      name="text-input"
      placeholder='Try searching "Rami Malek"'
      type="text"
      class="rounded-2xl bg-primary-lightGrey border border-primary-grey pl-sm h-md md:h-lg w-full"
    />
    <a
      class="flex items-center justify-center bg-primary-lightGrey border-2 rounded-full border-primary-grey shrink-0 h-md w-md"
      id="search-people-link"
      href="#"
    >
      <Arrow
        className="group-hover/search-button:translate-x-2 group-hover/search-button:after:h-7 after:transition-all after:duration-500 after:ease-secondary duration-500 ease-secondary"
      />
    </a>
  </search-wrapper>
</header>

<script>
  import { navigate } from "astro:transitions/client";

  class SearchWrapper extends HTMLElement {
    constructor() {
      super();
      const textInputString = "#text-input";
      const searchPeopleLinkString = "#search-people-link";

      const textInput: HTMLTextAreaElement =
        this.querySelector(textInputString)!;

      const searchPeopleLink: HTMLAnchorElement = this.querySelector(
        searchPeopleLinkString
      )!;

      const updateLink = (inputValue: string) => {
        const add_params = {
          query: inputValue,
        };
        const searchUrl = `/search?${new URLSearchParams([...Object.entries(add_params)])}`;
        searchPeopleLink.href = searchUrl;
      };

      searchPeopleLink.addEventListener("click", function (e) {
        if (!textInput.value.trim()) {
          e.preventDefault();
        }
      });

      textInput.addEventListener("input", function (e: Event) {
        const element = e.currentTarget as HTMLInputElement;
        const value = element.value;
        updateLink(value);
      });

      textInput.addEventListener("keydown", async function (e) {
        if (e.key === "Enter") {
          e.preventDefault();
          navigate(searchPeopleLink.href);
        }
      });
    }
  }

  customElements.define("search-wrapper", SearchWrapper);
</script>
